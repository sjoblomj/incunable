#!/bin/bash
# @produces ref, img
# It doesn't produce ref, but we say that it does, so that this gets parsed first.

# Parameters: length = 5cm, style = displaystyle, (textstyle)

awk -i inplace -i "utils.awk" -v targetfile="${2}" -v additionalfiles="${3}" '
BEGIN {
    DEFAULT_LENGTH = "7.1cm";
    DEFAULT_STYLE  = "displaystyle";
    EQ_NUMBER = 0;
    delete EQ_HASHES[""];

    is_reading_equation = 0;
    equation_length  = "";
    equation_class   = "";
    equation_style   = "";
    equation_content = "";
}
{
    while (1) {
        begin_open_pos = index($0, "{{beginmath");
        end_open_pos   = index($0, "{{endmath");

        ## Example input
        # Apa bepa.
        # CEPA. {{beginmath}}f(x) = \cos(x)\\
        # \tau = 2\pi
        # {{endmath}} cepa depa {{beginmath}}\tau{{endmath}} epa fepa {{beginmath}}
        # a^2 + b^2 = c^2\\
        # c = \sqrt{a^2 + b^2}
        # {{endmath}} gepa.
        # hepa.
        # ipa.

        if (is_reading_equation && end_open_pos == 0) {
            # We are currently reading a multiline equation and this line does not end it. Read one more line of the equation
            equation_content = equation_content $0 "\n";
            break;

        } else if (is_reading_equation && end_open_pos > 0) {
            # We are reading a multiline equation that ends on this line.
            # Read the rest of the equation
            eq = substr($0, 0, end_open_pos - 1);
            equation_content = equation_content eq; 

            # Remove the {{endmath}} from $0
            end_finish_pos = find_template_closing_pos(substr($0, end_open_pos + length(OPENING_BRACKETS))) + length(OPENING_BRACKETS) + end_open_pos + 1;
            img = create_svg_file_and_reference();
            $0 = img substr($0, end_finish_pos);

            is_reading_equation = 0;
            equation_length  = "";
            equation_class   = "";
            equation_style   = "";
            equation_content = "";

        } else if (begin_open_pos > 0 && end_open_pos > 0) {
            # We are not currently reading an equation, however,
            # the current line contains both a start and an end of a one-line equation.

            begin_finish_pos = index(substr($0, begin_open_pos), CLOSING_BRACKETS) + begin_open_pos;
            end_finish_pos = find_template_closing_pos(substr($0, end_open_pos + length(OPENING_BRACKETS))) + length(OPENING_BRACKETS) + end_open_pos + 1;

            # Get parameters if any
            template = substr($0, begin_open_pos, begin_finish_pos - begin_open_pos + 1);
            equation_length = get_parameter(template, "length");
            equation_class  = get_parameter(template, "class");
            equation_style  = get_parameter(template, "style");

            equation_content = substr($0, begin_finish_pos + 1, end_open_pos - begin_finish_pos - 1);
            img = create_svg_file_and_reference();

            $0 = substr($0, 0, begin_open_pos - 1) img substr($0, end_finish_pos);

        } else if (begin_open_pos > 0) {
            # We are not currently reading an equation, however,
            # the current line contains a start of a multi-line equation.

            begin_finish_pos = find_template_closing_pos(substr($0, begin_open_pos + length(OPENING_BRACKETS))) + length(OPENING_BRACKETS) + begin_open_pos + 1;

            # Get parameters if any
            template = substr($0, begin_open_pos, begin_finish_pos - begin_open_pos + 1);
            equation_length = get_parameter(template, "length");
            equation_class  = get_parameter(template, "class");
            equation_style  = get_parameter(template, "style");

            line = trim(substr($0, 0, begin_open_pos - 1));
            if (line != "")
                print line;

            # Read equation on this line
            equation_content = substr($0, begin_finish_pos) "\n";

            is_reading_equation = 1;
            break;

        } else {
            # We are not reading an equation, and there is not one starting either.
            print $0;
            break;
        }
    }
}

function create_svg_file_and_reference(folder, filename,  eq) {
    eq = trim(equation_content);
    filename = get_equation_name_if_exists();

    if (filename == "") {
        folder = write_to_file(eq, equation_length, equation_style);
        filename = latex_to_svg(folder);
        update_equation_name_dictionary(filename);
    }

    gsub("\n", " ", eq);
    gsub(/\\/, "\\\\", eq);
    gsub("&", "\\\\&", eq);
    return "{{img" ((equation_class == "") ? "" : " |class=" equation_class) " |file=" filename " |title=" eq "}}";
}

function write_to_file(eq, eqlength, style,  latex, command, tempfolder) {
    if (eqlength == "")
        eqlength = DEFAULT_LENGTH;
    if (style == "")
        style = DEFAULT_STYLE;

    latex = "";
    latex = latex "\\documentclass{article}\n";
    latex = latex "\\usepackage{varwidth}\n";
    latex = latex "\\usepackage{amsmath}\n";
    latex = latex "\\usepackage{mathtools}\n"
    latex = latex "\\begin{document}\n";
    latex = latex "\\pagestyle{empty}\n";
    latex = latex "\\begin{varwidth}{" eqlength "}\n";
    latex = latex "\\begin{align*}\n";
    latex = latex "\\" style "\n";
    latex = latex eq "\n";
    latex = latex "\\end{align*}\n";
    latex = latex "\\end{varwidth}\n";
    latex = latex "\\end{document}\n";

    tempfolder = run_system_command_with_output("mktemp -dp /tmp");
    print latex > tempfolder "/equation.tex"
    return tempfolder;
}

function latex_to_svg(folder,  output_file) {
    output_file = "eq_" EQ_NUMBER ".svg";
    EQ_NUMBER += 1;

    run_system_command("pdflatex -output-directory=" folder " " folder "/equation.tex 1>/dev/null");
    run_system_command("pdfcrop " folder "/equation.pdf " folder "/equation.pdf 1>/dev/null");
    env_variables = "export LIBGS=/usr/lib/libgs.so; "; # Explicitly set Ghostscript location
    ghostscript_workaround = "export GS_OPTIONS=-dNEWPDF=false; "; # Workaround for dvisvgm version < 2.13.4, see https://dvisvgm.de/FAQ/
    env_variables = env_variables ghostscript_workaround;
    run_system_command(env_variables "dvisvgm --verbosity=2 --zoom=2 -P " folder "/equation.pdf -o " folder "/equation.svg 1>/dev/null");
    run_system_command("mv " folder "/equation.svg " additionalfiles "/" output_file);
    run_system_command("rm -rf " folder);

    return output_file;
}

function get_equation_name_if_exists(hash) {
    hash = run_system_command_with_output("echo \"" equation_style "_" equation_length "_" equation_content "\" | md5sum");
    return EQ_HASHES[hash];
}

function update_equation_name_dictionary(filename) {
    hash = run_system_command_with_output("echo \"" equation_style "_" equation_length "_" equation_content "\" | md5sum");
    EQ_HASHES[hash] = filename;
}
' $1
